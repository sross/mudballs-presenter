(in-package :mudballs-presenter)

#|
QUESTIONS
 - Should we be swapping the mbs and mbd file types around. Yes.




;; NOTES

Amendments are NOT allowed!


3 Phase release process
- create new release version (if not a new version but a new project then new project requirements are added (1))
  - if not a trusted user then wait for confirmation
- generate sysdef file
  - validate sysdef file (no #+ or #-)
- ensure that sysdef file compiles and loads in a number of lisp implementations



Requirement 1 - Creating a new project
--------------------------------------
We Need the concept of a user.


Information needed from user
 - name
 - email
 - author
 - documentation string
 - home page (default to mudballs.com/system/<name>)
 - keywords
 - Trusted Users can change the above or edit the raw define-system-template  form.
   (we could just require users to register but )

Generate key and display/email to user.

create root project directory with <name>.mbs and authorized-keys




Security Issues
------
- What is stopping someone from uploading a sysdef file with (mapcar 'delete-file (directory "/**/*"))
  - we will have a trusted user who can upload whatever they wish
  - other users will need to have their project/release approved
  -  standard users get upgraded to trusted after a certain number of releases or if we are sure that they
     are Real Lispers (TM) (eg. Edi Weitz doesn't need to get his system definition form vetted)

- Network Sniffing of key (I don't think this is such a big issue at the moment)




NOTES
--
This is starting to look like a much larger project
- break into distinct phases

- 1st phase
  - rollout of manual project creation and seperate sysdef files with manual merging of said sysdef files. (done)
  - This must wrap everything in a with-provider-form (done)
  - and we must insert the support file for the system. (done)
  - Add Validation of generated file. (done)


- 2nd phase
  - private rollout of automatic project updates no confirmation required. (done)
  - private rollout of project creation. (done)


- 2.5 phase 
   At this point the current systems must be moved into this format. (done)
   
a solution found for handling SBCL contrib systems
a solution found to deliver the systems
   the above deployed to replace the static directory that mudballs now has
   A backup solution must also be implemented now
   Send out mudballs state of the nation address.

- 3rd phase
  - rollout of page per project.
    - requires fixup of autogenerated documentation
    - hopefully suz can help with this.

- 4th phase
  - public rollout of untrusted project creation and deletion
    - requires verificatioan of generated sysdef files.
    - requries web frontend for creation and updating
      - this must notify me.

- 5th phase
  - public rollout of user creation
  - public rollout of trusted user project creation & update


|#


;;; Interface for adding a new version of a system

(defun create-project (name &rest default-system-options)
  (check-type name string)
  (when (project-exists-p name)
    (error "Project ~S already exists." name))
  (create-project-path name)
  (write-template-form name (create-template-form name default-system-options))
  t)


(defun create-project-path (name)
  (ensure-directories-exist (project-path name)))


(defun create-template-form (name default-system-options)
  (or (first (get-option default-system-options :template))
      `(define-system-template ,name ()
                               ,@default-system-options)))

(defun write-template-form (name form)
  (with-open-file (stream (template-path (make-instance 'project :path (project-path name)))
                          :direction :output :if-exists :supersede)
    (with-standard-io-syntax
      (pprint form stream)
      (terpri stream))))


(defun sysdef-form-p (form)
  (and (consp form)
       (cdddr form)
       (eql (car form) 'define-system)
       (typep (second form) 'sysdef:system-name)))
       
(defun release-system (sysdef-form mudball-file)
  (assert (sysdef-form-p sysdef-form))
  (let ((version (sysdef::version-string (has-option sysdef-form :version)))
        (project-name (string-downcase (second sysdef-form))))
    (assert (sysdef::exact-version-spec-p version))
    (let ((project (make-instance 'project :path (project-path project-name))))
      (flet ((release ()
               (when (version-exists-p project version)
                 (error "Version ~S already exists for project ~S." (sysdef::version-string version)
                        project-name))
    
               (create-release-folder project version)
    
               (copy-file mudball-file (project-mudball-file project version))

               (with-open-file (output (project-sysdef-file project version)
                                       :direction :output :if-exists :error)
                 (with-standard-io-syntax ()
                   (pprint (ensure-md5sum sysdef-form mudball-file) output)
                   (terpri output)))))
        (handler-bind ((error (lambda (-)
                                (delete-directory-and-files (project-version-path (name-of project) version)))))
          (release))))))


(defun ensure-md5sum (sysdef-form file)
  (let ((md5sum (md5sum-file file)))
    (if (has-option sysdef-form :md5sum)
        (progn (assert (string= md5sum (car (has-option sysdef-form :md5sum))))
          sysdef-form)
        (merge-system-form `(template <name> () (:md5sum ,md5sum))
                           sysdef-form))))


(defun add-project (name contact author maintainer licence keywords home  doc)
  (create-project  name
                   `(:contact ,contact)
                   `(:author  ,author)
                   `(:maintainer ,maintainer)
                   `(:licence ,licence)
                   `(:keywords ,@keywords)
                   `(:home-page ,home)
                   `(:documentation ,doc)))


#|
(in-package :sysdef-user)

(mudballs-presenter::release-system '(define-system :mudballs ()
                                       (:author "Sean Ross")
                                       (:supports (:implementation :lispworks :sbcl :cmucl :clisp :openmcl :scl :allegrocl))
                                       (:contact "sross@common-lisp.net")
                                       (:version 0 3 0)
                                       (:config-file "~;.mudballs")
                                       (:preferences "~;.mudballs.prefs")
                                       (:components "sysdef" "mudballs"))
                                    "/tmp/mudballs.0.3.0.mb")

(add-project "series"
             "http://sourceforge.net/mail/?group_id=3235"
             "Raymond Toy"
             "Richard C. Waters"
             :mit
             '("lazy" "functional" "data" "structure")
             "http://series.sourceforge.net/"
             "A series is a data structure much like a sequence, with similar kinds of operations. The difference is that in many situations, operations on series may be composed functionally and yet execute iteratively, without the need to construct intermediate series values explicitly. In this manner, series provide both the clarity of a functional programming style and the efficiency of an iterative programming style.

Series is the culmination of many years of design and use of this approach, during which some 100,000 lines of application code have been written (by about half a dozen people over the course of seven years) using the series facility in nearly all iteration situations. This includes one large system (KBEmacs) of over 40,000 lines of code.")



             


|#


;; eof
